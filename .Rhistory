)
scatterplot(df$experience~df$absences, regLine = TRUE,
smooth = FALSE,
boxplots = 'xy',
pch = 19,
cex = 2,
col = 'indianred2',
data = df
)
scatterplot(df$experience~df$absences, regLine = TRUE,
smooth = FALSE,
boxplots = 'xy',
pch = 19,
cex = 2,
col = 'indianred2'
)
scatterplot(formula = df$experience~df$absences,
regLine = TRUE,
smooth = FALSE,
boxplots = 'xy',
pch = 19,
cex = 2,
col = 'indianred2'
)
lm(absences~experience, data = df)
mylm = lm(absences~experience, data = df)
mylm
summary(mylm)
mylm$residuals
summary(mylm$residuals)
hist(mylm$residuals)
scatterplot(formula = df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = 19, # plot character for point, 19 = dot
cex = 2, # size of points
col = 'indianred2' # color of points
)
scatterplot(formula = df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = 19, # plot character for point, 19 = dot
cex = 2, # size of points
col = 'indianred2' # color of points
)
scatterplot(formula = df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = 19, # plot character for point, 19 = dot
cex = 2, # size of points
col = 'indianred2' # color of points
)
scatterplot(formula = df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = 19, # plot character for point, 19 = dot
cex = 2, # size of points
col = 'indianred2' # color of points
)
df = read.csv("absence.csv")
scatterplot(formula = df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = 19, # plot character for point, 19 = dot
cex = 2, # size of points
col = 'indianred2' # color of points
)
scatterplot(formula = df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = 19, # plot character for point, 19 = dot
cex = 2, # size of points
col = 'indianred2', # color of points
data = df
)
View(df)
scatterplot(df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = 19, # plot character for point, 19 = dot
cex = 2, # size of points
col = 'indianred2', # color of points
)
hist(mylm$residuals)
mylm = lm(absences~experience, data = df) # fits linear models given two variables
summary(mylm) # provides 5 number summary of linear model
hist(mylm$residuals)
scatterplot(df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = 19, # plot character for point, 19 = dot
cex = 2, # size of points
col = 'indianred2', # color of points
)
scatterplot(df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = 19, # plot character for point, 19 = dot
cex = 1, # size of points
col = 'indianred2', # color of points
)
scatterplot(df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = 19, # plot character for point, 19 = dot
cex = 1.5, # size of points
col = 'indianred2', # color of points
)
a = function(num1, num2){
return(num1+num2+4)
}
a(5,6)
scatterplot(df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = 0, # plot character for point, 19 = dot
cex = 1.5, # size of points
col = 'indianred2', # color of points
)
scatterplot(df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = #, # plot character for point, 19 = dot
cex = 1.5, # size of points
col = 'indianred2', # color of points
)
scatterplot(df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = "#", # plot character for point, 19 = dot
cex = 1.5, # size of points
col = 'indianred2', # color of points
)
scatterplot(df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = "o", # plot character for point, 19 = dot
cex = 1.5, # size of points
col = 'indianred2', # color of points
)
scatterplot(df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = "O", # plot character for point, 19 = dot
cex = 1.5, # size of points
col = 'indianred2', # color of points
)
scatterplot(df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = "+", # plot character for point, 19 = dot
cex = 1.5, # size of points
col = 'indianred2', # color of points
)
scatterplot(df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = "4", # plot character for point, 19 = dot
cex = 1.5, # size of points
col = 'indianred2', # color of points
)
scatterplot(df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = 4, # plot character for point, 19 = dot
cex = 1.5, # size of points
col = 'indianred2', # color of points
)
scatterplot(df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = 19, # plot character for point, 19 = dot
cex = 1.5, # size of points
col = 'indianred2', # color of points
)
scatterplot(df$experience~df$absences, # formula = not necessary but good practice
regLine = TRUE, # draws fit line
smooth = FALSE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = 20, # plot character for point, 19 = dot
cex = 1.5, # size of points
col = 'indianred2', # color of points
)
scatterplot(df$experience~df$absences, # yaxis~xaxis
regLine = TRUE, # draws fit line
smooth = TRUE, # delete mean and median functions from plot
boxplots = 'xy', # if 'x' x-boxplot drawn, if 'y' y-boxplot drawn, if 'xy' both boxplots drawn
pch = 20, # plot character for point, 19 = dot
cex = 1.5, # size of points
col = 'indianred2', # color of points
)
help(scatterplot(smooth))
help(scatterplot)
for(i in 'sebastian'){
print(i)
}
for(i in strsplit('sebastian', '')){
print(i)
}
for(i in strsplit('sebastian', '')[1]){
print(i)
}
for(i in list(strsplit('sebastian', '')){
print(i)
}
for(i in list(strsplit('sebastian', '')){
print(i)
}
for(i in list(strsplit('sebastian', '')){
print(i)
}
for(i in c(strsplit('sebastian', '')){
print(i)
}
for(i in c(strsplit('sebastian', '')){
print(i)
}
vector(strsplit('sebastian', ''))
word = strsplit('sebastian', '')
vector(word)
vector(word[1])
vector('sebastian')
list('sebastian')
list(strsplit('sebastian', ''))
shiny::runApp('Shiny/App1')
runApp('Shiny/Example1')
runApp('Shiny/Week8')
runApp('Shiny/Week8')
runApp('Shiny/Week8')
runApp()
runApp('Shiny/Week8')
runApp()
runApp()
runApp('Shiny/Week8')
ui = fluidPage(
# Title
titlePanel(title = 'Week 8 Class Assignment'),
sidebarPanel(
# File Upload
fileInput('file',
label = h5('Submit a .txt File',
multiple = FALSE,
accept = c('text/csv',
'text/comma-separated-values,plain',
'.txt'))
),
# Slider Input
sliderInput(inputId = 'slideee',
label = h3('Slider range'),
min = 0,
max = 100,
value = c(0, 2))
)
# Plot generated distribution
)
ui = fluidPage(
# Title
titlePanel(title = 'Week 8 Class Assignment'),
sidebarPanel(
# File Upload
fileInput('file',
label = h5('Submit a .txt File',
multiple = FALSE,
accept = c('text/csv',
'text/comma-separated-values,plain',
'.txt'))
),
# Slider Input
sliderInput(inputId = 'slideee',
label = h3('Slider range'),
min = 0,
max = 100,
value = c(0, 2))
)
# Plot generated distribution
)
server = function(input, output) {
output$kpiPlot = renderPlot({
df = read.csv(input$file1$datapath)
selection = str(input$kpiSel)
attach(df)
if(selection == 'Engagement'){
a = plot(engagement, main='Engagement KPI')
}else if(selection == 'Performance') {
a = plot(performance, main='Performance KPI')
}else if(selection == 'Tweet Length'){
a = plot(tweet, main='Tweet Length KPI')
}
})
}
server = function(input, output) {
output$kpiPlot = renderPlot({
df = read.csv(input$file1$datapath)
selection = str(input$kpiSel)
attach(df)
if(selection == 'Engagement'){
a = plot(engagement, main='Engagement KPI')
}else if(selection == 'Performance') {
a = plot(performance, main='Performance KPI')
}else if(selection == 'Tweet Length'){
a = plot(tweet, main='Tweet Length KPI')
}
})
}
ui = navbarPage('TwitterDashboard',
tabPanel('Description', h4('Twitter Dashboard'),
h5('This dashboard was created by SebastiÃ¡n Pastor Ferrari in order to track Twitter accounts
with Key Performance Indicators (KPIs).'),
br(),
h6('** Natural Language Toolkit (Â© Copyright 2019, NLTK Project)
is integrated in order to tokenize tweets and provide sentiment scores.'),
br(),
h6('Â© SebastiÃ¡n Pastor Ferrari - 2019 - Version 0.1')),
navbarMenu('Key Performance Indicators (KPIs)',
tabPanel('General KPIs [ALL LANGUAGES]',
sidebarPanel(
selectInput("kpiSel", "KPI Selection:",
choices=list('Engagement',
'Performance',
'Tweet Length')),
hr(),
helpText("Last update: 12/16/2019 -- 8:30 PM")
),
# Create a spot for the barplot
mainPanel(
plotOutput("kpiPlot")
)),
tabPanel('Sentiment KPIs [ENGLISH ONLY] - Â© Copyright 2019, NLTK Project',
plotOutput('sentkpi')
)),
tabPanel('File Upload',
fileInput("file1", label = h3("File input")),
hr(),
fluidRow(column(4, verbatimTextOutput("value"))),
checkboxGroupInput(inputId='checkbox1',
label='General KPIs [ALL LANGUAGES]',
choices=list('@realdonaldtrump'='donald.csv',
'@kimkardashian'='kim.csv',
'@kanyewest'='ye.csv',
'@deportestvc'='tvc.csv',
'@cdolimpia'='olimpia.csv',
'@juanpa_sabillon'='juanpa.csv',
'@vijildaniel'='vijil.csv',
'@mmvilleda'='marito.csv',
'@sebasrpf'='sebas.csv'),
selected=c('donald.csv','kim.csv','ye.csv','olimpia.csv')
),
checkboxGroupInput(inputId='checkbox2',
label='NLTK APIs',
choices=list('@realdonaldtrump'=1,'@kimkardashian'=2,'@kanyewest'=3),
selected=c(1,2,3)
),
h6('Â© SebastiÃ¡n Pastor Ferrari - 2019 - Version 0.1'))
runApp()
ui = navbarPage('TwitterDashboard',
tabPanel('Description', h4('Twitter Dashboard'),
h5('This dashboard was created by SebastiÃ¡n Pastor Ferrari in order to track Twitter accounts
with Key Performance Indicators (KPIs).'),
br(),
h6('** Natural Language Toolkit (Â© Copyright 2019, NLTK Project)
is integrated in order to tokenize tweets and provide sentiment scores.'),
br(),
h6('Â© SebastiÃ¡n Pastor Ferrari - 2019 - Version 0.1')),
navbarMenu('Key Performance Indicators (KPIs)',
tabPanel('General KPIs [ALL LANGUAGES]',
sidebarPanel(
selectInput("kpiSel", "KPI Selection:",
choices=list('Engagement',
'Performance',
'Tweet Length')),
hr(),
helpText("Last update: 12/16/2019 -- 8:30 PM")
),
# Create a spot for the barplot
mainPanel(
plotOutput("kpiPlot")
)),
tabPanel('Sentiment KPIs [ENGLISH ONLY] - Â© Copyright 2019, NLTK Project',
plotOutput('sentkpi')
)),
tabPanel('File Upload',
fileInput("file1", label = h3("File input")),
hr(),
fluidRow(column(4, verbatimTextOutput("value"))),
checkboxGroupInput(inputId='checkbox1',
label='General KPIs [ALL LANGUAGES]',
choices=list('@realdonaldtrump'='donald.csv',
'@kimkardashian'='kim.csv',
'@kanyewest'='ye.csv',
'@deportestvc'='tvc.csv',
'@cdolimpia'='olimpia.csv',
'@juanpa_sabillon'='juanpa.csv',
'@vijildaniel'='vijil.csv',
'@mmvilleda'='marito.csv',
'@sebasrpf'='sebas.csv'),
selected=c('donald.csv','kim.csv','ye.csv','olimpia.csv')
),
checkboxGroupInput(inputId='checkbox2',
label='NLTK APIs',
choices=list('@realdonaldtrump'=1,'@kimkardashian'=2,'@kanyewest'=3),
selected=c(1,2,3)
),
h6('Â© SebastiÃ¡n Pastor Ferrari - 2019 - Version 0.1'))
}
ui = navbarPage('TwitterDashboard',
tabPanel('Description', h4('Twitter Dashboard'),
h5('This dashboard was created by SebastiÃ¡n Pastor Ferrari in order to track Twitter accounts
with Key Performance Indicators (KPIs).'),
br(),
h6('** Natural Language Toolkit (Â© Copyright 2019, NLTK Project)
is integrated in order to tokenize tweets and provide sentiment scores.'),
br(),
h6('Â© SebastiÃ¡n Pastor Ferrari - 2019 - Version 0.1')),
navbarMenu('Key Performance Indicators (KPIs)',
tabPanel('General KPIs [ALL LANGUAGES]',
sidebarPanel(
selectInput("kpiSel", "KPI Selection:",
choices=list('Engagement',
'Performance',
'Tweet Length')),
hr(),
helpText("Last update: 12/16/2019 -- 8:30 PM")
),
# Create a spot for the barplot
mainPanel(
plotOutput("kpiPlot")
)),
tabPanel('Sentiment KPIs [ENGLISH ONLY] - Â© Copyright 2019, NLTK Project',
plotOutput('sentkpi')
)),
tabPanel('File Upload',
fileInput("file1", label = h3("File input")),
hr(),
fluidRow(column(4, verbatimTextOutput("value"))),
checkboxGroupInput(inputId='checkbox1',
label='General KPIs [ALL LANGUAGES]',
choices=list('@realdonaldtrump'='donald.csv',
'@kimkardashian'='kim.csv',
'@kanyewest'='ye.csv',
'@deportestvc'='tvc.csv',
'@cdolimpia'='olimpia.csv',
'@juanpa_sabillon'='juanpa.csv',
'@vijildaniel'='vijil.csv',
'@mmvilleda'='marito.csv',
'@sebasrpf'='sebas.csv'),
selected=c('donald.csv','kim.csv','ye.csv','olimpia.csv')
),
checkboxGroupInput(inputId='checkbox2',
label='NLTK APIs',
choices=list('@realdonaldtrump'=1,'@kimkardashian'=2,'@kanyewest'=3),
selected=c(1,2,3)
),
h6('© SebastiÃ¡n Pastor Ferrari - 2019 - Version 0.1'))
shinyApp(ui,server)
shinyApp(ui=ui,server=server)
shiny::runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
Encoding('')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
Encoding()
Encoding('UTF9')
Encoding('UTF8')
Encoding('UTF-8')
Encoding('utf-8')
Encoding('utf8')
Encoding('')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
runApp('~/Data_Coding/final_project')
shiny::runApp('~/Data_Coding/final_project')
shiny::runApp()
